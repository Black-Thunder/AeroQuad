   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"AQMath.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	__aeabi_fcmpeq
  19              		.global	__aeabi_fmul
  20              		.global	__aeabi_fsub
  21              		.global	__aeabi_fadd
  22              		.section	.text._Z12filterSmoothfff,"ax",%progbits
  23              		.align	1
  24              		.global	_Z12filterSmoothfff
  25              		.thumb
  26              		.thumb_func
  28              	_Z12filterSmoothfff:
  29              	.LFB114:
  30              		.file 1 "C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math/AQMath.cpp"
   1:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** /*
   2:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   AeroQuad v3.0.1 - February 2012
   3:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   www.AeroQuad.com
   4:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   Copyright (c) 2012 Ted Carancho.  All rights reserved.
   5:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   An Open Source Arduino based multicopter.
   6:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****  
   7:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   This program is free software: you can redistribute it and/or modify 
   8:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   it under the terms of the GNU General Public License as published by 
   9:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   the Free Software Foundation, either version 3 of the License, or 
  10:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   (at your option) any later version. 
  11:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  12:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   This program is distributed in the hope that it will be useful, 
  13:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   but WITHOUT ANY WARRANTY; without even the implied warranty of 
  14:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  15:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   GNU General Public License for more details. 
  16:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  17:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   You should have received a copy of the GNU General Public License 
  18:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   along with this program. If not, see <http://www.gnu.org/licenses/>. 
  19:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** */
  20:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  21:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** #include "AQMath.h"
  22:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  23:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  24:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** // Low pass filter, kept as regular C function for speed
  25:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** float filterSmooth(float currentData, float previousData, float smoothFactor) 
  26:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
  31              		.loc 1 26 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              	.LVL0:
  36 0000 70B5     		push	{r4, r5, r6, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 16
  39              		.cfi_offset 14, -4
  40              		.cfi_offset 6, -8
  41              		.cfi_offset 5, -12
  42              		.cfi_offset 4, -16
  43              		.loc 1 26 0
  44 0002 0446     		mov	r4, r0
  45 0004 0D46     		mov	r5, r1
  27:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   if (smoothFactor != 1.0) //only apply time compensated filter if smoothFactor is applied
  46              		.loc 1 27 0
  47 0006 1046     		mov	r0, r2
  48              	.LVL1:
  49 0008 4FF07E51 		mov	r1, #1065353216
  50              	.LVL2:
  26:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
  51              		.loc 1 26 0
  52 000c 1646     		mov	r6, r2
  53              		.loc 1 27 0
  54 000e FFF7FEFF 		bl	__aeabi_fcmpeq
  55              	.LVL3:
  56 0012 88B9     		cbnz	r0, .L2
  28:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
  29:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     return (previousData * (1.0 - smoothFactor) + (currentData * smoothFactor)); 
  57              		.loc 1 29 0
  58 0014 2046     		mov	r0, r4
  59 0016 3146     		mov	r1, r6
  60 0018 FFF7FEFF 		bl	__aeabi_fmul
  61 001c 3146     		mov	r1, r6
  62 001e 0446     		mov	r4, r0
  63              	.LVL4:
  64 0020 4FF07E50 		mov	r0, #1065353216
  65 0024 FFF7FEFF 		bl	__aeabi_fsub
  66 0028 0146     		mov	r1, r0
  67 002a 2846     		mov	r0, r5
  68 002c FFF7FEFF 		bl	__aeabi_fmul
  69 0030 2146     		mov	r1, r4
  70 0032 FFF7FEFF 		bl	__aeabi_fadd
  71 0036 0446     		mov	r4, r0
  72              	.L2:
  30:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
  31:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   return currentData; //if smoothFactor == 1.0, do not calculate, just bypass!
  32:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
  73              		.loc 1 32 0
  74 0038 2046     		mov	r0, r4
  75 003a 70BD     		pop	{r4, r5, r6, pc}
  76              		.cfi_endproc
  77              	.LFE114:
  79              		.section	.text._Z20filterSmoothWithTimeffff,"ax",%progbits
  80              		.align	1
  81              		.global	_Z20filterSmoothWithTimeffff
  82              		.thumb
  83              		.thumb_func
  85              	_Z20filterSmoothWithTimeffff:
  86              	.LFB115:
  33:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  34:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** float filterSmoothWithTime(float currentData, float previousData, float smoothFactor, float dT_scal
  35:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {  //time scale factor
  87              		.loc 1 35 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              	.LVL5:
  92 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 24
  95              		.cfi_offset 14, -4
  96              		.cfi_offset 7, -8
  97              		.cfi_offset 6, -12
  98              		.cfi_offset 5, -16
  99              		.cfi_offset 4, -20
 100              		.cfi_offset 3, -24
 101              		.loc 1 35 0
 102 0002 0446     		mov	r4, r0
 103 0004 0D46     		mov	r5, r1
  36:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   if (smoothFactor != 1.0) //only apply time compensated filter if smoothFactor is applied
 104              		.loc 1 36 0
 105 0006 1046     		mov	r0, r2
 106              	.LVL6:
 107 0008 4FF07E51 		mov	r1, #1065353216
 108              	.LVL7:
  35:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {  //time scale factor
 109              		.loc 1 35 0
 110 000c 1646     		mov	r6, r2
 111 000e 1F46     		mov	r7, r3
 112              		.loc 1 36 0
 113 0010 FFF7FEFF 		bl	__aeabi_fcmpeq
 114              	.LVL8:
 115 0014 B0B9     		cbnz	r0, .L6
  37:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
  38:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     return (previousData * (1.0 - (smoothFactor * dT_scaledAroundOne)) + (currentData * (smoothFact
 116              		.loc 1 38 0
 117 0016 3046     		mov	r0, r6
 118 0018 3946     		mov	r1, r7
 119 001a FFF7FEFF 		bl	__aeabi_fmul
 120 001e 0646     		mov	r6, r0
 121              	.LVL9:
 122 0020 3146     		mov	r1, r6
 123 0022 2046     		mov	r0, r4
 124 0024 FFF7FEFF 		bl	__aeabi_fmul
 125 0028 3146     		mov	r1, r6
 126 002a 0446     		mov	r4, r0
 127              	.LVL10:
 128 002c 4FF07E50 		mov	r0, #1065353216
 129 0030 FFF7FEFF 		bl	__aeabi_fsub
 130 0034 0146     		mov	r1, r0
 131 0036 2846     		mov	r0, r5
 132 0038 FFF7FEFF 		bl	__aeabi_fmul
 133 003c 2146     		mov	r1, r4
 134 003e FFF7FEFF 		bl	__aeabi_fadd
 135 0042 0446     		mov	r4, r0
 136              	.L6:
  39:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
  40:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   return currentData; //if smoothFactor == 1.0, do not calculate, just bypass!
  41:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 137              		.loc 1 41 0
 138 0044 2046     		mov	r0, r4
 139 0046 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 140              		.cfi_endproc
 141              	.LFE115:
 143              		.section	.text._ZN12MedianFilterC2Ev,"ax",%progbits
 144              		.align	1
 145              		.global	_ZN12MedianFilterC2Ev
 146              		.thumb
 147              		.thumb_func
 149              	_ZN12MedianFilterC2Ev:
 150              	.LFB117:
  42:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  43:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** // ***********************************************************************
  44:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** // *********************** Median Filter Class ***************************
  45:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** // ***********************************************************************
  46:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** // Median filter currently not used, but kept if needed for the future
  47:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** // To declare use: MedianFilter filterSomething;
  48:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  49:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** MedianFilter::MedianFilter() {}
 151              		.loc 1 49 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156              	.LVL11:
 157              		.loc 1 49 0
 158 0000 7047     		bx	lr
 159              		.cfi_endproc
 160              	.LFE117:
 162              		.section	.text._ZN12MedianFilter10initializeEv,"ax",%progbits
 163              		.align	1
 164              		.global	_ZN12MedianFilter10initializeEv
 165              		.thumb
 166              		.thumb_func
 168              	_ZN12MedianFilter10initializeEv:
 169              	.LFB119:
  50:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  51:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void MedianFilter::initialize() 
  52:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 170              		.loc 1 52 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175              	.LVL12:
 176              		.loc 1 52 0
 177 0000 0246     		mov	r2, r0
 178 0002 1923     		movs	r3, #25
 179              	.LVL13:
 180              	.L12:
 181              	.LBB2:
 182              	.LBB3:
  53:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int index = 0; index < DATASIZE; index++) 
  54:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
  55:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     data[index] = 0;
 183              		.loc 1 55 0 discriminator 2
 184 0004 0021     		movs	r1, #0
 185 0006 42F8041B 		str	r1, [r2], #4	@ float
  53:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int index = 0; index < DATASIZE; index++) 
 186              		.loc 1 53 0 discriminator 2
 187 000a 013B     		subs	r3, r3, #1
  56:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     sortData[index] = 0;
 188              		.loc 1 56 0 discriminator 2
 189 000c 1166     		str	r1, [r2, #96]	@ float
  53:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int index = 0; index < DATASIZE; index++) 
 190              		.loc 1 53 0 discriminator 2
 191 000e F9D1     		bne	.L12
 192              	.LBE3:
  57:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
  58:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   dataIndex = 0;
 193              		.loc 1 58 0
 194 0010 C0F8C830 		str	r3, [r0, #200]
 195              	.LBE2:
  59:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 196              		.loc 1 59 0
 197 0014 7047     		bx	lr
 198              		.cfi_endproc
 199              	.LFE119:
 201              		.global	__aeabi_f2iz
 202              		.global	__aeabi_i2f
 203              		.global	__aeabi_fcmplt
 204              		.section	.text._ZN12MedianFilter6filterEf,"ax",%progbits
 205              		.align	1
 206              		.global	_ZN12MedianFilter6filterEf
 207              		.thumb
 208              		.thumb_func
 210              	_ZN12MedianFilter6filterEf:
 211              	.LFB120:
  60:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   
  61:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** const float MedianFilter::filter(float newData) 
  62:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 212              		.loc 1 62 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              	.LVL14:
 217 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 218              	.LCFI2:
 219              		.cfi_def_cfa_offset 40
 220              		.cfi_offset 14, -4
 221              		.cfi_offset 11, -8
 222              		.cfi_offset 10, -12
 223              		.cfi_offset 9, -16
 224              		.cfi_offset 8, -20
 225              		.cfi_offset 7, -24
 226              		.cfi_offset 6, -28
 227              		.cfi_offset 5, -32
 228              		.cfi_offset 4, -36
 229              		.cfi_offset 3, -40
 230              	.LBB4:
  63:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   int temp, j; // used to sort array
  64:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  65:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   // Insert new data into raw data array round robin style
  66:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   data[dataIndex] = newData;
 231              		.loc 1 66 0
 232 0004 D0F8C830 		ldr	r3, [r0, #200]
 233              	.LBE4:
  62:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 234              		.loc 1 62 0
 235 0008 0446     		mov	r4, r0
 236              	.LBB6:
  67:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   if (dataIndex < (DATASIZE-1)) 
 237              		.loc 1 67 0
 238 000a 172B     		cmp	r3, #23
  66:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   data[dataIndex] = newData;
 239              		.loc 1 66 0
 240 000c 40F82310 		str	r1, [r0, r3, lsl #2]	@ float
 241              		.loc 1 67 0
 242 0010 01DC     		bgt	.L15
  68:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
  69:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     dataIndex++;
 243              		.loc 1 69 0
 244 0012 0133     		adds	r3, r3, #1
 245 0014 00E0     		b	.L23
 246              	.L15:
  70:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
  71:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   else 
  72:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
  73:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     dataIndex = 0;    
 247              		.loc 1 73 0
 248 0016 0023     		movs	r3, #0
 249              	.L23:
 250 0018 C0F8C830 		str	r3, [r0, #200]
  74:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
  75:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  76:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   // Copy raw data to sort data array
  77:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   memcpy(sortData, data, sizeof(data));
 251              		.loc 1 77 0
 252 001c 2146     		mov	r1, r4
 253              	.LVL15:
 254 001e 04F16400 		add	r0, r4, #100
 255              	.LVL16:
 256 0022 6422     		movs	r2, #100
 257 0024 FFF7FEFF 		bl	memcpy
 258              	.LVL17:
 259 0028 2746     		mov	r7, r4
  78:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  79:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   // Insertion Sort
  80:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i=1; i<=(DATASIZE-1); i++) 
 260              		.loc 1 80 0
 261 002a 0125     		movs	r5, #1
 262              	.LVL18:
 263              	.L20:
 264              	.LBB5:
  81:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
  82:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     temp = sortData[i];
 265              		.loc 1 82 0
 266 002c B86E     		ldr	r0, [r7, #104]	@ float
 267 002e FFF7FEFF 		bl	__aeabi_f2iz
  61:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** const float MedianFilter::filter(float newData) 
 268              		.loc 1 61 0
 269 0032 04EB8508 		add	r8, r4, r5, lsl #2
 270              		.loc 1 82 0
 271 0036 8346     		mov	fp, r0
 272              	.LVL19:
  61:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** const float MedianFilter::filter(float newData) 
 273              		.loc 1 61 0
 274 0038 6E1E     		subs	r6, r5, #1
 275              	.LVL20:
 276 003a 08F16408 		add	r8, r8, #100
 277              	.LVL21:
 278              	.L19:
  83:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     j = i-1;
  84:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     while(temp<sortData[j] && j>=0) 
 279              		.loc 1 84 0 discriminator 1
 280 003e 5846     		mov	r0, fp
 281 0040 FFF7FEFF 		bl	__aeabi_i2f
 282 0044 58F8049D 		ldr	r9, [r8, #-4]!	@ float
 283 0048 8246     		mov	sl, r0
 284 004a 4946     		mov	r1, r9
 285 004c FFF7FEFF 		bl	__aeabi_fcmplt
 286 0050 28B1     		cbz	r0, .L17
 287              		.loc 1 84 0 is_stmt 0 discriminator 2
 288 0052 731C     		adds	r3, r6, #1
 289 0054 03D0     		beq	.L17
  85:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 	{
  86:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 	  sortData[j+1] = sortData[j];
 290              		.loc 1 86 0 is_stmt 1 discriminator 5
 291 0056 C8F80490 		str	r9, [r8, #4]	@ float
  87:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 	  j = j-1;
 292              		.loc 1 87 0 discriminator 5
 293 005a 013E     		subs	r6, r6, #1
 294              	.LVL22:
 295 005c EFE7     		b	.L19
 296              	.L17:
  80:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i=1; i<=(DATASIZE-1); i++) 
 297              		.loc 1 80 0
 298 005e 0135     		adds	r5, r5, #1
 299              	.LVL23:
  88:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     }
  89:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     sortData[j+1] = temp;
 300              		.loc 1 89 0
 301 0060 04EB8606 		add	r6, r4, r6, lsl #2
 302              	.LVL24:
  80:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i=1; i<=(DATASIZE-1); i++) 
 303              		.loc 1 80 0
 304 0064 0437     		adds	r7, r7, #4
 305 0066 192D     		cmp	r5, #25
 306              		.loc 1 89 0
 307 0068 C6F868A0 		str	sl, [r6, #104]	@ float
  80:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i=1; i<=(DATASIZE-1); i++) 
 308              		.loc 1 80 0
 309 006c DED1     		bne	.L20
 310              	.LBE5:
 311              	.LBE6:
  90:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
  91:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   return data[(DATASIZE)>>1]; // return data value in middle of sorted array
  92:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** } 
 312              		.loc 1 92 0
 313 006e 206B     		ldr	r0, [r4, #48]	@ float
 314 0070 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 315              		.cfi_endproc
 316              	.LFE120:
 318              		.section	.text._Z16vectorDotProductiPfS_,"ax",%progbits
 319              		.align	1
 320              		.global	_Z16vectorDotProductiPfS_
 321              		.thumb
 322              		.thumb_func
 324              	_Z16vectorDotProductiPfS_:
 325              	.LFB121:
  93:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
  94:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
  95:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Vector Dot Product
  96:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Return the Dot product of vectors a and b with length m
  97:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
  98:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: vectorDotProduct(m, a, b)
  99:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 100:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 101:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** float vectorDotProduct(int length, float vector1[], float vector2[])
 102:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 326              		.loc 1 102 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              	.LVL25:
 331 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 332              	.LCFI3:
 333              		.cfi_def_cfa_offset 32
 334              		.cfi_offset 14, -4
 335              		.cfi_offset 9, -8
 336              		.cfi_offset 8, -12
 337              		.cfi_offset 7, -16
 338              		.cfi_offset 6, -20
 339              		.cfi_offset 5, -24
 340              		.cfi_offset 4, -28
 341              		.cfi_offset 3, -32
 342              	.LBB7:
 343              	.LBB8:
 103:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float dotProduct = 0;
 104:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   //int   i;
 105:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 106:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < length; i++)
 344              		.loc 1 106 0
 345 0004 0026     		movs	r6, #0
 346              	.LBE8:
 347              	.LBE7:
 102:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 348              		.loc 1 102 0
 349 0006 0546     		mov	r5, r0
 350 0008 0C46     		mov	r4, r1
 351 000a 9146     		mov	r9, r2
 352              	.LBB10:
 353              	.LBB9:
 354              		.loc 1 106 0
 355 000c B046     		mov	r8, r6
 103:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float dotProduct = 0;
 356              		.loc 1 103 0
 357 000e 0027     		movs	r7, #0
 358              		.loc 1 106 0
 359 0010 0CE0     		b	.L25
 360              	.LVL26:
 361              	.L26:
 107:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 108:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   dotProduct += vector1[i] * vector2[i];
 362              		.loc 1 108 0 discriminator 2
 363 0012 59F80610 		ldr	r1, [r9, r6]	@ float
 364 0016 A059     		ldr	r0, [r4, r6]	@ float
 365 0018 FFF7FEFF 		bl	__aeabi_fmul
 366 001c 0146     		mov	r1, r0
 367 001e 3846     		mov	r0, r7
 368 0020 FFF7FEFF 		bl	__aeabi_fadd
 106:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < length; i++)
 369              		.loc 1 106 0 discriminator 2
 370 0024 08F10108 		add	r8, r8, #1
 371              	.LVL27:
 372              		.loc 1 108 0 discriminator 2
 373 0028 0746     		mov	r7, r0
 374              	.LVL28:
 106:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < length; i++)
 375              		.loc 1 106 0 discriminator 2
 376 002a 0436     		adds	r6, r6, #4
 377              	.LVL29:
 378              	.L25:
 106:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < length; i++)
 379              		.loc 1 106 0 is_stmt 0 discriminator 1
 380 002c A845     		cmp	r8, r5
 381 002e F0DB     		blt	.L26
 382              	.LBE9:
 383              	.LBE10:
 109:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 110:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 111:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   return dotProduct;
 112:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 384              		.loc 1 112 0 is_stmt 1
 385 0030 3846     		mov	r0, r7
 386 0032 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 387              		.cfi_endproc
 388              	.LFE121:
 390              		.section	.text._Z18vectorCrossProductPfS_S_,"ax",%progbits
 391              		.align	1
 392              		.global	_Z18vectorCrossProductPfS_S_
 393              		.thumb
 394              		.thumb_func
 396              	_Z18vectorCrossProductPfS_S_:
 397              	.LFB122:
 113:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 114:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 115:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Vector Cross Product
 116:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Compute the cross product of vectors a and b with length 3
 117:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Place result in vector C
 118:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
 119:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: vectorDotProduct(c, a, b)
 120:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 121:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 122:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void vectorCrossProduct(float vectorC[3], float vectorA[3], float vectorB[3])
 123:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 398              		.loc 1 123 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              	.LVL30:
 403 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 404              	.LCFI4:
 405              		.cfi_def_cfa_offset 24
 406              		.cfi_offset 14, -4
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 6, -12
 409              		.cfi_offset 5, -16
 410              		.cfi_offset 4, -20
 411              		.cfi_offset 3, -24
 412              		.loc 1 123 0
 413 0002 0C46     		mov	r4, r1
 414 0004 0546     		mov	r5, r0
 124:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   vectorC[0] = (vectorA[1] * vectorB[2]) - (vectorA[2] * vectorB[1]);
 415              		.loc 1 124 0
 416 0006 4868     		ldr	r0, [r1, #4]	@ float
 417              	.LVL31:
 418 0008 9168     		ldr	r1, [r2, #8]	@ float
 419              	.LVL32:
 123:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 420              		.loc 1 123 0
 421 000a 1646     		mov	r6, r2
 422              		.loc 1 124 0
 423 000c FFF7FEFF 		bl	__aeabi_fmul
 424              	.LVL33:
 425 0010 7168     		ldr	r1, [r6, #4]	@ float
 426 0012 0746     		mov	r7, r0
 427 0014 A068     		ldr	r0, [r4, #8]	@ float
 428 0016 FFF7FEFF 		bl	__aeabi_fmul
 429 001a 0146     		mov	r1, r0
 430 001c 3846     		mov	r0, r7
 431 001e FFF7FEFF 		bl	__aeabi_fsub
 432 0022 2860     		str	r0, [r5, #0]	@ float
 125:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   vectorC[1] = (vectorA[2] * vectorB[0]) - (vectorA[0] * vectorB[2]);
 433              		.loc 1 125 0
 434 0024 3168     		ldr	r1, [r6, #0]	@ float
 435 0026 A068     		ldr	r0, [r4, #8]	@ float
 436 0028 FFF7FEFF 		bl	__aeabi_fmul
 437 002c B168     		ldr	r1, [r6, #8]	@ float
 438 002e 0746     		mov	r7, r0
 439 0030 2068     		ldr	r0, [r4, #0]	@ float
 440 0032 FFF7FEFF 		bl	__aeabi_fmul
 441 0036 0146     		mov	r1, r0
 442 0038 3846     		mov	r0, r7
 443 003a FFF7FEFF 		bl	__aeabi_fsub
 444 003e 6860     		str	r0, [r5, #4]	@ float
 126:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   vectorC[2] = (vectorA[0] * vectorB[1]) - (vectorA[1] * vectorB[0]);
 445              		.loc 1 126 0
 446 0040 7168     		ldr	r1, [r6, #4]	@ float
 447 0042 2068     		ldr	r0, [r4, #0]	@ float
 448 0044 FFF7FEFF 		bl	__aeabi_fmul
 449 0048 3168     		ldr	r1, [r6, #0]	@ float
 450 004a 0746     		mov	r7, r0
 451 004c 6068     		ldr	r0, [r4, #4]	@ float
 452 004e FFF7FEFF 		bl	__aeabi_fmul
 453 0052 0146     		mov	r1, r0
 454 0054 3846     		mov	r0, r7
 455 0056 FFF7FEFF 		bl	__aeabi_fsub
 456 005a A860     		str	r0, [r5, #8]	@ float
 127:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 457              		.loc 1 127 0
 458 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 459              		.cfi_endproc
 460              	.LFE122:
 462              		.section	.text._Z11vectorScaleiPfS_f,"ax",%progbits
 463              		.align	1
 464              		.global	_Z11vectorScaleiPfS_f
 465              		.thumb
 466              		.thumb_func
 468              	_Z11vectorScaleiPfS_f:
 469              	.LFB123:
 128:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 129:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 130:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Multiply a vector by a scalar
 131:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Mulitply vector a with length m by a scalar
 132:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Place result in vector b
 133:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
 134:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: vectorScale(m, b, a, scalar)
 135:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 136:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 137:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void vectorScale(int length, float scaledVector[], float inputVector[], float scalar)
 138:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 470              		.loc 1 138 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              	.LVL34:
 475 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 476              	.LCFI5:
 477              		.cfi_def_cfa_offset 32
 478              		.cfi_offset 14, -4
 479              		.cfi_offset 9, -8
 480              		.cfi_offset 8, -12
 481              		.cfi_offset 7, -16
 482              		.cfi_offset 6, -20
 483              		.cfi_offset 5, -24
 484              		.cfi_offset 4, -28
 485              		.cfi_offset 3, -32
 486              	.LBB11:
 139:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < length; i++)
 487              		.loc 1 139 0
 488 0004 0027     		movs	r7, #0
 489              	.LBE11:
 138:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 490              		.loc 1 138 0
 491 0006 0546     		mov	r5, r0
 492 0008 0C46     		mov	r4, r1
 493 000a 1646     		mov	r6, r2
 494 000c 9946     		mov	r9, r3
 495              	.LBB12:
 496              		.loc 1 139 0
 497 000e B846     		mov	r8, r7
 498 0010 07E0     		b	.L29
 499              	.LVL35:
 500              	.L30:
 140:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 141:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****    scaledVector[i] = inputVector[i] * scalar;
 501              		.loc 1 141 0 discriminator 2
 502 0012 F059     		ldr	r0, [r6, r7]	@ float
 503 0014 4946     		mov	r1, r9
 504 0016 FFF7FEFF 		bl	__aeabi_fmul
 139:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < length; i++)
 505              		.loc 1 139 0 discriminator 2
 506 001a 08F10108 		add	r8, r8, #1
 507              	.LVL36:
 508              		.loc 1 141 0 discriminator 2
 509 001e E051     		str	r0, [r4, r7]	@ float
 139:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < length; i++)
 510              		.loc 1 139 0 discriminator 2
 511 0020 0437     		adds	r7, r7, #4
 512              	.LVL37:
 513              	.L29:
 139:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < length; i++)
 514              		.loc 1 139 0 is_stmt 0 discriminator 1
 515 0022 A845     		cmp	r8, r5
 516 0024 F5DB     		blt	.L30
 517              	.LBE12:
 142:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 143:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 518              		.loc 1 143 0 is_stmt 1
 519 0026 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 520              		.cfi_endproc
 521              	.LFE123:
 523              		.section	.text._Z9vectorAddiPfS_S_,"ax",%progbits
 524              		.align	1
 525              		.global	_Z9vectorAddiPfS_S_
 526              		.thumb
 527              		.thumb_func
 529              	_Z9vectorAddiPfS_S_:
 530              	.LFB124:
 144:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 145:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 146:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Compute sum of 2 vectors
 147:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Add vector a to vector b, both of length m
 148:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Place result in vector c
 149:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
 150:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: vectorAdd(m, c, b, a)
 151:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 152:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 153:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void vectorAdd(int length, float vectorC[], float vectorA[], float vectorB[])
 154:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 531              		.loc 1 154 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              	.LVL38:
 536 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 537              	.LCFI6:
 538              		.cfi_def_cfa_offset 32
 539              		.cfi_offset 14, -4
 540              		.cfi_offset 9, -8
 541              		.cfi_offset 8, -12
 542              		.cfi_offset 7, -16
 543              		.cfi_offset 6, -20
 544              		.cfi_offset 5, -24
 545              		.cfi_offset 4, -28
 546              		.cfi_offset 3, -32
 547              	.LBB13:
 155:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i = 0; i < length; i++)
 548              		.loc 1 155 0
 549 0004 0027     		movs	r7, #0
 550              	.LBE13:
 154:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 551              		.loc 1 154 0
 552 0006 0546     		mov	r5, r0
 553 0008 0C46     		mov	r4, r1
 554 000a 1646     		mov	r6, r2
 555 000c 9946     		mov	r9, r3
 556              	.LBB14:
 557              		.loc 1 155 0
 558 000e B846     		mov	r8, r7
 559 0010 08E0     		b	.L32
 560              	.LVL39:
 561              	.L33:
 156:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 157:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****      vectorC[i] = vectorA[i] + vectorB[i];
 562              		.loc 1 157 0 discriminator 2
 563 0012 F059     		ldr	r0, [r6, r7]	@ float
 564 0014 59F80710 		ldr	r1, [r9, r7]	@ float
 565 0018 FFF7FEFF 		bl	__aeabi_fadd
 155:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i = 0; i < length; i++)
 566              		.loc 1 155 0 discriminator 2
 567 001c 08F10108 		add	r8, r8, #1
 568              	.LVL40:
 569              		.loc 1 157 0 discriminator 2
 570 0020 E051     		str	r0, [r4, r7]	@ float
 155:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i = 0; i < length; i++)
 571              		.loc 1 155 0 discriminator 2
 572 0022 0437     		adds	r7, r7, #4
 573              	.LVL41:
 574              	.L32:
 155:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i = 0; i < length; i++)
 575              		.loc 1 155 0 is_stmt 0 discriminator 1
 576 0024 A845     		cmp	r8, r5
 577 0026 F4DB     		blt	.L33
 578              	.LBE14:
 158:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 159:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 579              		.loc 1 159 0 is_stmt 1
 580 0028 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 581              		.cfi_endproc
 582              	.LFE124:
 584              		.section	.text._Z14vectorSubtractiPfS_S_,"ax",%progbits
 585              		.align	1
 586              		.global	_Z14vectorSubtractiPfS_S_
 587              		.thumb
 588              		.thumb_func
 590              	_Z14vectorSubtractiPfS_S_:
 591              	.LFB125:
 160:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 161:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 162:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Compute difference of 2 vectors
 163:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Subtract vector a from vector b, both of length m
 164:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Place result in vector c
 165:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
 166:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: vectorSubtract(m, c, b, a)
 167:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 168:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 169:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void vectorSubtract(int length, float vectorC[], float vectorA[], float vectorB[])
 170:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 592              		.loc 1 170 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              	.LVL42:
 597 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 598              	.LCFI7:
 599              		.cfi_def_cfa_offset 32
 600              		.cfi_offset 14, -4
 601              		.cfi_offset 9, -8
 602              		.cfi_offset 8, -12
 603              		.cfi_offset 7, -16
 604              		.cfi_offset 6, -20
 605              		.cfi_offset 5, -24
 606              		.cfi_offset 4, -28
 607              		.cfi_offset 3, -32
 608              	.LBB15:
 171:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i = 0; i < length; i++)
 609              		.loc 1 171 0
 610 0004 0027     		movs	r7, #0
 611              	.LBE15:
 170:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 612              		.loc 1 170 0
 613 0006 0546     		mov	r5, r0
 614 0008 0C46     		mov	r4, r1
 615 000a 1646     		mov	r6, r2
 616 000c 9946     		mov	r9, r3
 617              	.LBB16:
 618              		.loc 1 171 0
 619 000e B846     		mov	r8, r7
 620 0010 08E0     		b	.L35
 621              	.LVL43:
 622              	.L36:
 172:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 173:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****      vectorC[i] = vectorA[i] - vectorB[i];
 623              		.loc 1 173 0 discriminator 2
 624 0012 F059     		ldr	r0, [r6, r7]	@ float
 625 0014 59F80710 		ldr	r1, [r9, r7]	@ float
 626 0018 FFF7FEFF 		bl	__aeabi_fsub
 171:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i = 0; i < length; i++)
 627              		.loc 1 171 0 discriminator 2
 628 001c 08F10108 		add	r8, r8, #1
 629              	.LVL44:
 630              		.loc 1 173 0 discriminator 2
 631 0020 E051     		str	r0, [r4, r7]	@ float
 171:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i = 0; i < length; i++)
 632              		.loc 1 171 0 discriminator 2
 633 0022 0437     		adds	r7, r7, #4
 634              	.LVL45:
 635              	.L35:
 171:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for(int i = 0; i < length; i++)
 636              		.loc 1 171 0 is_stmt 0 discriminator 1
 637 0024 A845     		cmp	r8, r5
 638 0026 F4DB     		blt	.L36
 639              	.LBE16:
 174:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 175:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 640              		.loc 1 175 0 is_stmt 1
 641 0028 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 642              		.cfi_endproc
 643              	.LFE125:
 645              		.section	.text._Z14matrixMultiplyiiiPfS_S_,"ax",%progbits
 646              		.align	1
 647              		.global	_Z14matrixMultiplyiiiPfS_S_
 648              		.thumb
 649              		.thumb_func
 651              	_Z14matrixMultiplyiiiPfS_S_:
 652              	.LFB126:
 176:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 177:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 178:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Matrix Multiply
 179:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Multiply matrix A times matrix B, matrix A dimension m x n, matrix B dimension n x p
 180:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Result placed in matrix C, dimension m x p
 181:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
 182:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: matrixMultiply(m, n, p, C, A, B)
 183:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 184:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 185:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void matrixMultiply(int aRows, int aCols_bRows, int bCols, float matrixC[], float matrixA[], float 
 186:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 653              		.loc 1 186 0
 654              		.cfi_startproc
 655              		@ args = 8, pretend = 0, frame = 16
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              	.LVL46:
 658 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 659              	.LCFI8:
 660              		.cfi_def_cfa_offset 36
 661              		.cfi_offset 14, -4
 662              		.cfi_offset 11, -8
 663              		.cfi_offset 10, -12
 664              		.cfi_offset 9, -16
 665              		.cfi_offset 8, -20
 666              		.cfi_offset 7, -24
 667              		.cfi_offset 6, -28
 668              		.cfi_offset 5, -32
 669              		.cfi_offset 4, -36
 670 0004 85B0     		sub	sp, sp, #20
 671              	.LCFI9:
 672              		.cfi_def_cfa_offset 56
 673              		.loc 1 186 0
 674 0006 0391     		str	r1, [sp, #12]
 675 0008 1446     		mov	r4, r2
 676              	.LBB17:
 187:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < aRows * bCols; i++)
 677              		.loc 1 187 0
 678 000a 1E46     		mov	r6, r3
 679 000c 1946     		mov	r1, r3
 680              	.LVL47:
 681              	.LBE17:
 186:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 682              		.loc 1 186 0
 683 000e 8446     		mov	ip, r0
 684              	.LBB18:
 685              		.loc 1 187 0
 686 0010 4243     		muls	r2, r0, r2
 687              	.LVL48:
 688 0012 0023     		movs	r3, #0
 689              	.LVL49:
 690 0014 03E0     		b	.L38
 691              	.LVL50:
 692              	.L39:
 188:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 189:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     matrixC[i] = 0.0;
 693              		.loc 1 189 0 discriminator 2
 694 0016 0020     		movs	r0, #0
 695 0018 41F8040B 		str	r0, [r1], #4	@ float
 187:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < aRows * bCols; i++)
 696              		.loc 1 187 0 discriminator 2
 697 001c 0133     		adds	r3, r3, #1
 698              	.LVL51:
 699              	.L38:
 187:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < aRows * bCols; i++)
 700              		.loc 1 187 0 is_stmt 0 discriminator 1
 701 001e 9342     		cmp	r3, r2
 702 0020 F9DB     		blt	.L39
 185:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void matrixMultiply(int aRows, int aCols_bRows, int bCols, float matrixC[], float matrixA[], float 
 703              		.loc 1 185 0 is_stmt 1
 704 0022 0399     		ldr	r1, [sp, #12]
 705 0024 A300     		lsls	r3, r4, #2
 706              	.LVL52:
 707 0026 8A00     		lsls	r2, r1, #2
 708 0028 DDF83890 		ldr	r9, [sp, #56]
 709              	.LBE18:
 710              	.LBB19:
 711              	.LBB20:
 712 002c 4FF00008 		mov	r8, #0
 713 0030 9A46     		mov	sl, r3
 714 0032 E346     		mov	fp, ip
 715 0034 24E0     		b	.L40
 716              	.LVL53:
 717              	.L41:
 718              	.LBB21:
 190:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 191:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 192:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < aRows; i++)
 193:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 194:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for(int j = 0; j < aCols_bRows; j++)
 195:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     {
 196:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       for(int k = 0;  k < bCols; k++)
 197:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       {
 198:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****        matrixC[i * bCols + k] += matrixA[i * aCols_bRows + j] * matrixB[j * bCols + k];
 719              		.loc 1 198 0 discriminator 2
 720 0036 5BF80510 		ldr	r1, [fp, r5]	@ float
 721 003a 59F82700 		ldr	r0, [r9, r7, lsl #2]	@ float
 722 003e 0292     		str	r2, [sp, #8]
 723 0040 8DE80810 		stmia	sp, {r3, ip}
 724 0044 FFF7FEFF 		bl	__aeabi_fmul
 725              	.LVL54:
 726 0048 0146     		mov	r1, r0
 727 004a 7059     		ldr	r0, [r6, r5]	@ float
 728 004c FFF7FEFF 		bl	__aeabi_fadd
 729 0050 9DE80810 		ldmia	sp, {r3, ip}
 730              	.LVL55:
 731 0054 7051     		str	r0, [r6, r5]	@ float
 196:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       for(int k = 0;  k < bCols; k++)
 732              		.loc 1 196 0 discriminator 2
 733 0056 08F10108 		add	r8, r8, #1
 734              	.LVL56:
 735 005a 0435     		adds	r5, r5, #4
 736 005c 029A     		ldr	r2, [sp, #8]
 737              	.LVL57:
 738 005e 01E0     		b	.L42
 739              	.LVL58:
 740              	.L45:
 741              	.LBE21:
 194:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for(int j = 0; j < aCols_bRows; j++)
 742              		.loc 1 194 0
 743 0060 0025     		movs	r5, #0
 744 0062 A846     		mov	r8, r5
 745              	.L42:
 746              	.LVL59:
 747              	.LBB22:
 196:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       for(int k = 0;  k < bCols; k++)
 748              		.loc 1 196 0 discriminator 1
 749 0064 A045     		cmp	r8, r4
 750 0066 E6DB     		blt	.L41
 751              	.LBE22:
 194:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for(int j = 0; j < aCols_bRows; j++)
 752              		.loc 1 194 0
 753 0068 0137     		adds	r7, r7, #1
 754              	.LVL60:
 755 006a D344     		add	fp, fp, sl
 756              	.LVL61:
 757              	.L44:
 194:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for(int j = 0; j < aCols_bRows; j++)
 758              		.loc 1 194 0 is_stmt 0 discriminator 1
 759 006c 0398     		ldr	r0, [sp, #12]
 760 006e 8742     		cmp	r7, r0
 761 0070 F6DB     		blt	.L45
 762 0072 9046     		mov	r8, r2
 763 0074 9B46     		mov	fp, r3
 764 0076 6246     		mov	r2, ip
 765              	.LVL62:
 766              	.LBE20:
 192:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < aRows; i++)
 767              		.loc 1 192 0 is_stmt 1
 768 0078 08F10108 		add	r8, r8, #1
 769              	.LVL63:
 770 007c 5644     		add	r6, r6, sl
 771 007e E144     		add	r9, r9, ip
 772              	.LVL64:
 773              	.L40:
 192:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < aRows; i++)
 774              		.loc 1 192 0 is_stmt 0 discriminator 1
 775 0080 D845     		cmp	r8, fp
 776 0082 07DA     		bge	.L37
 185:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void matrixMultiply(int aRows, int aCols_bRows, int bCols, float matrixC[], float matrixA[], float 
 777              		.loc 1 185 0 is_stmt 1
 778 0084 DDF83CC0 		ldr	ip, [sp, #60]
 779 0088 5B46     		mov	r3, fp
 780              	.LBB23:
 781 008a 0027     		movs	r7, #0
 782 008c E346     		mov	fp, ip
 783              	.LVL65:
 784 008e 9446     		mov	ip, r2
 785 0090 4246     		mov	r2, r8
 786 0092 EBE7     		b	.L44
 787              	.LVL66:
 788              	.L37:
 789              	.LBE23:
 790              	.LBE19:
 199:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       }
 200:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     }
 201:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 202:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 791              		.loc 1 202 0
 792 0094 05B0     		add	sp, sp, #20
 793 0096 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 794              		.cfi_endproc
 795              	.LFE126:
 797              		.section	.text._Z9matrixAddiiPfS_S_,"ax",%progbits
 798              		.align	1
 799              		.global	_Z9matrixAddiiPfS_S_
 800              		.thumb
 801              		.thumb_func
 803              	_Z9matrixAddiiPfS_S_:
 804              	.LFB127:
 203:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 204:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 205:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Matrix Addition
 206:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Add matrix A to matrix B, dimensions m x n
 207:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Result placed in matrix C, dimension m x n
 208:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
 209:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: matrixAdd(m, n, C, A, B)
 210:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 211:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 212:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void matrixAdd(int rows, int cols, float matrixC[], float matrixA[], float matrixB[])
 213:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 805              		.loc 1 213 0
 806              		.cfi_startproc
 807              		@ args = 4, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              	.LVL67:
 810 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 811              	.LCFI10:
 812              		.cfi_def_cfa_offset 32
 813              		.cfi_offset 14, -4
 814              		.cfi_offset 9, -8
 815              		.cfi_offset 8, -12
 816              		.cfi_offset 7, -16
 817              		.cfi_offset 6, -20
 818              		.cfi_offset 5, -24
 819              		.cfi_offset 4, -28
 820              		.cfi_offset 3, -32
 821              	.LBB24:
 214:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 822              		.loc 1 214 0
 823 0004 0025     		movs	r5, #0
 824              	.LBE24:
 213:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 825              		.loc 1 213 0
 826 0006 1446     		mov	r4, r2
 827 0008 9946     		mov	r9, r3
 828 000a DDF82080 		ldr	r8, [sp, #32]
 829              	.LBB25:
 830              		.loc 1 214 0
 831 000e 01FB00F7 		mul	r7, r1, r0
 832 0012 2E46     		mov	r6, r5
 833 0014 08E0     		b	.L47
 834              	.LVL68:
 835              	.L48:
 215:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 216:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     matrixC[i] = matrixA[i] + matrixB[i];
 836              		.loc 1 216 0 discriminator 2
 837 0016 59F80500 		ldr	r0, [r9, r5]	@ float
 838 001a 58F80510 		ldr	r1, [r8, r5]	@ float
 839 001e FFF7FEFF 		bl	__aeabi_fadd
 214:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 840              		.loc 1 214 0 discriminator 2
 841 0022 0136     		adds	r6, r6, #1
 842              	.LVL69:
 843              		.loc 1 216 0 discriminator 2
 844 0024 6051     		str	r0, [r4, r5]	@ float
 214:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 845              		.loc 1 214 0 discriminator 2
 846 0026 0435     		adds	r5, r5, #4
 847              	.LVL70:
 848              	.L47:
 214:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 849              		.loc 1 214 0 is_stmt 0 discriminator 1
 850 0028 BE42     		cmp	r6, r7
 851 002a F4DB     		blt	.L48
 852              	.LBE25:
 217:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 218:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 853              		.loc 1 218 0 is_stmt 1
 854 002c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 855              		.cfi_endproc
 856              	.LFE127:
 858              		.section	.text._Z14matrixSubtractiiPfS_S_,"ax",%progbits
 859              		.align	1
 860              		.global	_Z14matrixSubtractiiPfS_S_
 861              		.thumb
 862              		.thumb_func
 864              	_Z14matrixSubtractiiPfS_S_:
 865              	.LFB128:
 219:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 220:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 221:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Matrix Subtraction
 222:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Subtract matrix A from matrix B, dimensions m x n
 223:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Result placed in matrix C, dimension m x n
 224:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
 225:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: matrixSubtract(m, n, C, A, B)
 226:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 227:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 228:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void matrixSubtract(int rows, int cols, float matrixC[], float matrixA[], float matrixB[])
 229:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 866              		.loc 1 229 0
 867              		.cfi_startproc
 868              		@ args = 4, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870              	.LVL71:
 871 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 872              	.LCFI11:
 873              		.cfi_def_cfa_offset 32
 874              		.cfi_offset 14, -4
 875              		.cfi_offset 9, -8
 876              		.cfi_offset 8, -12
 877              		.cfi_offset 7, -16
 878              		.cfi_offset 6, -20
 879              		.cfi_offset 5, -24
 880              		.cfi_offset 4, -28
 881              		.cfi_offset 3, -32
 882              	.LBB26:
 230:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 883              		.loc 1 230 0
 884 0004 0025     		movs	r5, #0
 885              	.LBE26:
 229:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 886              		.loc 1 229 0
 887 0006 1446     		mov	r4, r2
 888 0008 9946     		mov	r9, r3
 889 000a DDF82080 		ldr	r8, [sp, #32]
 890              	.LBB27:
 891              		.loc 1 230 0
 892 000e 01FB00F7 		mul	r7, r1, r0
 893 0012 2E46     		mov	r6, r5
 894 0014 08E0     		b	.L50
 895              	.LVL72:
 896              	.L51:
 231:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 232:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     matrixC[i] = matrixA[i] - matrixB[i];
 897              		.loc 1 232 0 discriminator 2
 898 0016 59F80500 		ldr	r0, [r9, r5]	@ float
 899 001a 58F80510 		ldr	r1, [r8, r5]	@ float
 900 001e FFF7FEFF 		bl	__aeabi_fsub
 230:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 901              		.loc 1 230 0 discriminator 2
 902 0022 0136     		adds	r6, r6, #1
 903              	.LVL73:
 904              		.loc 1 232 0 discriminator 2
 905 0024 6051     		str	r0, [r4, r5]	@ float
 230:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 906              		.loc 1 230 0 discriminator 2
 907 0026 0435     		adds	r5, r5, #4
 908              	.LVL74:
 909              	.L50:
 230:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 910              		.loc 1 230 0 is_stmt 0 discriminator 1
 911 0028 BE42     		cmp	r6, r7
 912 002a F4DB     		blt	.L51
 913              	.LBE27:
 233:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 234:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 914              		.loc 1 234 0 is_stmt 1
 915 002c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 916              		.cfi_endproc
 917              	.LFE128:
 919              		.section	.text._Z11matrixScaleiiPffS_,"ax",%progbits
 920              		.align	1
 921              		.global	_Z11matrixScaleiiPffS_
 922              		.thumb
 923              		.thumb_func
 925              	_Z11matrixScaleiiPffS_:
 926              	.LFB129:
 235:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 236:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 237:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 238:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Matrix Scaling
 239:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Scale matrix A, dimensions m x n, by a scaler, S
 240:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Result placed in matrix C, dimension m x n
 241:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
 242:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: matrixScale(m, n, C, S, B)
 243:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 244:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 245:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void matrixScale(int rows, int cols, float matrixC[], float scaler, float matrixA[])
 246:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 927              		.loc 1 246 0
 928              		.cfi_startproc
 929              		@ args = 4, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              	.LVL75:
 932 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 933              	.LCFI12:
 934              		.cfi_def_cfa_offset 32
 935              		.cfi_offset 14, -4
 936              		.cfi_offset 9, -8
 937              		.cfi_offset 8, -12
 938              		.cfi_offset 7, -16
 939              		.cfi_offset 6, -20
 940              		.cfi_offset 5, -24
 941              		.cfi_offset 4, -28
 942              		.cfi_offset 3, -32
 943              	.LBB28:
 247:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 944              		.loc 1 247 0
 945 0004 0025     		movs	r5, #0
 946              	.LBE28:
 246:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 947              		.loc 1 246 0
 948 0006 1446     		mov	r4, r2
 949 0008 9946     		mov	r9, r3
 950 000a DDF82080 		ldr	r8, [sp, #32]
 951              	.LBB29:
 952              		.loc 1 247 0
 953 000e 01FB00F7 		mul	r7, r1, r0
 954 0012 2E46     		mov	r6, r5
 955 0014 07E0     		b	.L53
 956              	.LVL76:
 957              	.L54:
 248:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 249:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     matrixC[i] = scaler * matrixA[i];
 958              		.loc 1 249 0 discriminator 2
 959 0016 58F80510 		ldr	r1, [r8, r5]	@ float
 960 001a 4846     		mov	r0, r9
 961 001c FFF7FEFF 		bl	__aeabi_fmul
 247:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 962              		.loc 1 247 0 discriminator 2
 963 0020 0136     		adds	r6, r6, #1
 964              	.LVL77:
 965              		.loc 1 249 0 discriminator 2
 966 0022 6051     		str	r0, [r4, r5]	@ float
 247:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 967              		.loc 1 247 0 discriminator 2
 968 0024 0435     		adds	r5, r5, #4
 969              	.LVL78:
 970              	.L53:
 247:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   for (int i = 0; i < rows * cols; i++)
 971              		.loc 1 247 0 is_stmt 0 discriminator 1
 972 0026 BE42     		cmp	r6, r7
 973 0028 F5DB     		blt	.L54
 974              	.LBE29:
 250:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 251:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 975              		.loc 1 251 0 is_stmt 1
 976 002a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 977              		.cfi_endproc
 978              	.LFE129:
 980              		.section	.text._Z18matrixTranspose3x3PfS_,"ax",%progbits
 981              		.align	1
 982              		.global	_Z18matrixTranspose3x3PfS_
 983              		.thumb
 984              		.thumb_func
 986              	_Z18matrixTranspose3x3PfS_:
 987              	.LFB130:
 252:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 253:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 254:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  3 x 3 Matrix Transpose
 255:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Compute 3 x 3 Transpose of A
 256:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Result placed in matrix C, dimension 3 x 3
 257:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
 258:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: Transpose3x3(C, A)
 259:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 260:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 261:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void matrixTranspose3x3(float matrixC[9], float matrixA[9])
 262:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 988              		.loc 1 262 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 0, uses_anonymous_args = 0
 992              		@ link register save eliminated.
 993              	.LVL79:
 263:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixC[0] = matrixA[0];
 994              		.loc 1 263 0
 995 0000 D1F800C0 		ldr	ip, [r1, #0]	@ float
 996 0004 C0F800C0 		str	ip, [r0, #0]	@ float
 264:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixC[1] = matrixA[3];
 997              		.loc 1 264 0
 998 0008 CA68     		ldr	r2, [r1, #12]	@ float
 999 000a 4260     		str	r2, [r0, #4]	@ float
 265:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixC[2] = matrixA[6];
 1000              		.loc 1 265 0
 1001 000c 8B69     		ldr	r3, [r1, #24]	@ float
 1002 000e 8360     		str	r3, [r0, #8]	@ float
 266:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixC[3] = matrixA[1];
 1003              		.loc 1 266 0
 1004 0010 D1F804C0 		ldr	ip, [r1, #4]	@ float
 1005 0014 C0F80CC0 		str	ip, [r0, #12]	@ float
 267:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixC[4] = matrixA[4];
 1006              		.loc 1 267 0
 1007 0018 0A69     		ldr	r2, [r1, #16]	@ float
 1008 001a 0261     		str	r2, [r0, #16]	@ float
 268:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixC[5] = matrixA[7];
 1009              		.loc 1 268 0
 1010 001c CB69     		ldr	r3, [r1, #28]	@ float
 1011 001e 4361     		str	r3, [r0, #20]	@ float
 269:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixC[6] = matrixA[2];
 1012              		.loc 1 269 0
 1013 0020 D1F808C0 		ldr	ip, [r1, #8]	@ float
 1014 0024 C0F818C0 		str	ip, [r0, #24]	@ float
 270:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixC[7] = matrixA[5];
 1015              		.loc 1 270 0
 1016 0028 4A69     		ldr	r2, [r1, #20]	@ float
 1017 002a C261     		str	r2, [r0, #28]	@ float
 271:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixC[8] = matrixA[8];
 1018              		.loc 1 271 0
 1019 002c 0B6A     		ldr	r3, [r1, #32]	@ float
 1020 002e 0362     		str	r3, [r0, #32]	@ float
 272:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 1021              		.loc 1 272 0
 1022 0030 7047     		bx	lr
 1023              		.cfi_endproc
 1024              	.LFE130:
 1026              		.global	__aeabi_fdiv
 1027              		.section	.text._Z16matrixInverse3x3PfS_,"ax",%progbits
 1028              		.align	1
 1029              		.global	_Z16matrixInverse3x3PfS_
 1030              		.thumb
 1031              		.thumb_func
 1033              	_Z16matrixInverse3x3PfS_:
 1034              	.LFB131:
 273:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 274:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 275:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  3 x 3 Matrix Inverse
 276:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Compute 3 x 3 Inverse of A
 277:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Result placed in matrix C, dimension 3 x 3
 278:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //
 279:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** //  Call as: Inverse3x3(C, A)
 280:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** ////////////////////////////////////////////////////////////////////////////////
 281:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 282:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** void matrixInverse3x3(float matrixC[9], float matrixA[9])
 283:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 1035              		.loc 1 283 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 128
 1038              		@ frame_needed = 0, uses_anonymous_args = 0
 1039              	.LVL80:
 1040 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1041              	.LCFI13:
 1042              		.cfi_def_cfa_offset 36
 1043              		.cfi_offset 14, -4
 1044              		.cfi_offset 11, -8
 1045              		.cfi_offset 10, -12
 1046              		.cfi_offset 9, -16
 1047              		.cfi_offset 8, -20
 1048              		.cfi_offset 7, -24
 1049              		.cfi_offset 6, -28
 1050              		.cfi_offset 5, -32
 1051              		.cfi_offset 4, -36
 1052              	.LBB30:
 284:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 285:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float det;
 286:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float transposeA[9];
 287:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float minors[9];
 288:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float transposeMinors[9];
 289:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 290:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   det = matrixA[0] * (matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7]) -
 1053              		.loc 1 290 0
 1054 0004 0E69     		ldr	r6, [r1, #16]	@ float
 1055 0006 D1F820A0 		ldr	sl, [r1, #32]	@ float
 1056              	.LBE30:
 283:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 1057              		.loc 1 283 0
 1058 000a A3B0     		sub	sp, sp, #140
 1059              	.LCFI14:
 1060              		.cfi_def_cfa_offset 176
 283:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 1061              		.loc 1 283 0
 1062 000c 8646     		mov	lr, r0
 1063 000e 0C46     		mov	r4, r1
 1064              	.LBB31:
 1065              		.loc 1 290 0
 1066 0010 D1F81490 		ldr	r9, [r1, #20]	@ float
 1067 0014 CF69     		ldr	r7, [r1, #28]	@ float
 291:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         matrixA[1] * (matrixA[3] * matrixA[8] - matrixA[5] * matrixA[6]) +
 1068              		.loc 1 291 0
 1069 0016 D1F80C80 		ldr	r8, [r1, #12]	@ float
 1070 001a 8D69     		ldr	r5, [r1, #24]	@ float
 292:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         matrixA[2] * (matrixA[3] * matrixA[7] - matrixA[4] * matrixA[6]);
 1071              		.loc 1 292 0
 1072 001c 3046     		mov	r0, r6
 1073              	.LVL81:
 1074 001e 5146     		mov	r1, sl
 1075              	.LVL82:
 1076 0020 CDF808E0 		str	lr, [sp, #8]
 1077 0024 FFF7FEFF 		bl	__aeabi_fmul
 1078              	.LVL83:
 1079 0028 3946     		mov	r1, r7
 1080 002a 8346     		mov	fp, r0
 1081 002c 4846     		mov	r0, r9
 1082 002e FFF7FEFF 		bl	__aeabi_fmul
 1083 0032 0146     		mov	r1, r0
 1084 0034 5846     		mov	r0, fp
 1085 0036 FFF7FEFF 		bl	__aeabi_fsub
 1086 003a 2168     		ldr	r1, [r4, #0]	@ float
 1087 003c FFF7FEFF 		bl	__aeabi_fmul
 1088 0040 5146     		mov	r1, sl
 1089 0042 8346     		mov	fp, r0
 1090 0044 4046     		mov	r0, r8
 1091 0046 FFF7FEFF 		bl	__aeabi_fmul
 1092 004a 2946     		mov	r1, r5
 1093 004c 8246     		mov	sl, r0
 1094 004e 4846     		mov	r0, r9
 1095 0050 FFF7FEFF 		bl	__aeabi_fmul
 1096 0054 0146     		mov	r1, r0
 1097 0056 5046     		mov	r0, sl
 1098 0058 FFF7FEFF 		bl	__aeabi_fsub
 1099 005c 6168     		ldr	r1, [r4, #4]	@ float
 1100 005e FFF7FEFF 		bl	__aeabi_fmul
 1101 0062 0146     		mov	r1, r0
 1102 0064 5846     		mov	r0, fp
 1103 0066 FFF7FEFF 		bl	__aeabi_fsub
 1104 006a 3946     		mov	r1, r7
 1105 006c 8146     		mov	r9, r0
 1106 006e 4046     		mov	r0, r8
 1107 0070 FFF7FEFF 		bl	__aeabi_fmul
 1108 0074 2946     		mov	r1, r5
 1109 0076 0746     		mov	r7, r0
 1110 0078 3046     		mov	r0, r6
 1111 007a FFF7FEFF 		bl	__aeabi_fmul
 1112 007e 0146     		mov	r1, r0
 1113 0080 3846     		mov	r0, r7
 1114 0082 FFF7FEFF 		bl	__aeabi_fsub
 1115 0086 A168     		ldr	r1, [r4, #8]	@ float
 1116 0088 FFF7FEFF 		bl	__aeabi_fmul
 1117 008c 0146     		mov	r1, r0
 1118 008e 4846     		mov	r0, r9
 1119 0090 FFF7FEFF 		bl	__aeabi_fadd
 293:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 294:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixTranspose3x3(transposeA, matrixA);
 1120              		.loc 1 294 0
 1121 0094 2146     		mov	r1, r4
 292:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         matrixA[2] * (matrixA[3] * matrixA[7] - matrixA[4] * matrixA[6]);
 1122              		.loc 1 292 0
 1123 0096 0646     		mov	r6, r0
 1124              	.LVL84:
 1125              		.loc 1 294 0
 1126 0098 07A8     		add	r0, sp, #28
 1127              	.LVL85:
 1128 009a 0396     		str	r6, [sp, #12]
 1129 009c FFF7FEFF 		bl	_Z18matrixTranspose3x3PfS_
 295:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 296:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[0] = matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7];
 1130              		.loc 1 296 0
 1131 00a0 2669     		ldr	r6, [r4, #16]	@ float
 1132              	.LVL86:
 1133 00a2 D4F820B0 		ldr	fp, [r4, #32]	@ float
 1134 00a6 3046     		mov	r0, r6
 1135 00a8 5946     		mov	r1, fp
 1136 00aa FFF7FEFF 		bl	__aeabi_fmul
 1137 00ae 6769     		ldr	r7, [r4, #20]	@ float
 1138 00b0 D4F81C90 		ldr	r9, [r4, #28]	@ float
 1139 00b4 8246     		mov	sl, r0
 1140 00b6 4946     		mov	r1, r9
 1141 00b8 3846     		mov	r0, r7
 1142 00ba FFF7FEFF 		bl	__aeabi_fmul
 1143 00be 0146     		mov	r1, r0
 1144 00c0 5046     		mov	r0, sl
 1145 00c2 FFF7FEFF 		bl	__aeabi_fsub
 297:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[1] = matrixA[5] * matrixA[6] - matrixA[3] * matrixA[8];
 1146              		.loc 1 297 0
 1147 00c6 D4F818A0 		ldr	sl, [r4, #24]	@ float
 296:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[0] = matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7];
 1148              		.loc 1 296 0
 1149 00ca 1090     		str	r0, [sp, #64]	@ float
 1150              		.loc 1 297 0
 1151 00cc E068     		ldr	r0, [r4, #12]	@ float
 1152 00ce 5146     		mov	r1, sl
 1153 00d0 0590     		str	r0, [sp, #20]	@ float
 1154 00d2 3846     		mov	r0, r7
 1155 00d4 FFF7FEFF 		bl	__aeabi_fmul
 1156 00d8 5946     		mov	r1, fp
 1157 00da 8046     		mov	r8, r0
 1158 00dc 0598     		ldr	r0, [sp, #20]	@ float
 1159 00de FFF7FEFF 		bl	__aeabi_fmul
 1160 00e2 0146     		mov	r1, r0
 1161 00e4 4046     		mov	r0, r8
 1162 00e6 FFF7FEFF 		bl	__aeabi_fsub
 298:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[2] = matrixA[3] * matrixA[7] - matrixA[4] * matrixA[6];
 1163              		.loc 1 298 0
 1164 00ea 4946     		mov	r1, r9
 297:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[1] = matrixA[5] * matrixA[6] - matrixA[3] * matrixA[8];
 1165              		.loc 1 297 0
 1166 00ec 1190     		str	r0, [sp, #68]	@ float
 1167              		.loc 1 298 0
 1168 00ee 0598     		ldr	r0, [sp, #20]	@ float
 1169 00f0 FFF7FEFF 		bl	__aeabi_fmul
 1170 00f4 5146     		mov	r1, sl
 1171 00f6 0546     		mov	r5, r0
 1172 00f8 3046     		mov	r0, r6
 1173 00fa FFF7FEFF 		bl	__aeabi_fmul
 1174 00fe 0146     		mov	r1, r0
 1175 0100 2846     		mov	r0, r5
 1176 0102 FFF7FEFF 		bl	__aeabi_fsub
 299:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[3] = matrixA[2] * matrixA[7] - matrixA[1] * matrixA[8];
 1177              		.loc 1 299 0
 1178 0106 D4F80880 		ldr	r8, [r4, #8]	@ float
 298:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[2] = matrixA[3] * matrixA[7] - matrixA[4] * matrixA[6];
 1179              		.loc 1 298 0
 1180 010a 1290     		str	r0, [sp, #72]	@ float
 1181              		.loc 1 299 0
 1182 010c 4946     		mov	r1, r9
 1183 010e 4046     		mov	r0, r8
 1184 0110 FFF7FEFF 		bl	__aeabi_fmul
 1185 0114 6568     		ldr	r5, [r4, #4]	@ float
 1186 0116 0246     		mov	r2, r0
 1187 0118 5946     		mov	r1, fp
 1188 011a 2846     		mov	r0, r5
 1189 011c 0492     		str	r2, [sp, #16]
 1190 011e FFF7FEFF 		bl	__aeabi_fmul
 1191 0122 049B     		ldr	r3, [sp, #16]
 1192 0124 0146     		mov	r1, r0
 1193 0126 1846     		mov	r0, r3
 1194 0128 FFF7FEFF 		bl	__aeabi_fsub
 300:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[4] = matrixA[0] * matrixA[8] - matrixA[2] * matrixA[6];
 1195              		.loc 1 300 0
 1196 012c 2468     		ldr	r4, [r4, #0]	@ float
 1197              	.LVL87:
 299:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[3] = matrixA[2] * matrixA[7] - matrixA[1] * matrixA[8];
 1198              		.loc 1 299 0
 1199 012e 1390     		str	r0, [sp, #76]	@ float
 1200              		.loc 1 300 0
 1201 0130 5946     		mov	r1, fp
 1202 0132 2046     		mov	r0, r4
 1203 0134 FFF7FEFF 		bl	__aeabi_fmul
 1204 0138 5146     		mov	r1, sl
 1205 013a 8346     		mov	fp, r0
 1206 013c 4046     		mov	r0, r8
 1207 013e FFF7FEFF 		bl	__aeabi_fmul
 1208 0142 0146     		mov	r1, r0
 1209 0144 5846     		mov	r0, fp
 1210 0146 FFF7FEFF 		bl	__aeabi_fsub
 301:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[5] = matrixA[1] * matrixA[6] - matrixA[0] * matrixA[7];
 1211              		.loc 1 301 0
 1212 014a 5146     		mov	r1, sl
 300:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[4] = matrixA[0] * matrixA[8] - matrixA[2] * matrixA[6];
 1213              		.loc 1 300 0
 1214 014c 1490     		str	r0, [sp, #80]	@ float
 1215              		.loc 1 301 0
 1216 014e 2846     		mov	r0, r5
 1217 0150 FFF7FEFF 		bl	__aeabi_fmul
 1218 0154 4946     		mov	r1, r9
 1219 0156 8246     		mov	sl, r0
 1220 0158 2046     		mov	r0, r4
 1221 015a FFF7FEFF 		bl	__aeabi_fmul
 1222 015e 0146     		mov	r1, r0
 1223 0160 5046     		mov	r0, sl
 1224 0162 FFF7FEFF 		bl	__aeabi_fsub
 302:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[6] = matrixA[1] * matrixA[5] - matrixA[2] * matrixA[4];
 1225              		.loc 1 302 0
 1226 0166 3946     		mov	r1, r7
 301:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[5] = matrixA[1] * matrixA[6] - matrixA[0] * matrixA[7];
 1227              		.loc 1 301 0
 1228 0168 1590     		str	r0, [sp, #84]	@ float
 1229              		.loc 1 302 0
 1230 016a 2846     		mov	r0, r5
 1231 016c FFF7FEFF 		bl	__aeabi_fmul
 1232 0170 3146     		mov	r1, r6
 1233 0172 8146     		mov	r9, r0
 1234 0174 4046     		mov	r0, r8
 1235 0176 FFF7FEFF 		bl	__aeabi_fmul
 1236 017a 0146     		mov	r1, r0
 1237 017c 4846     		mov	r0, r9
 1238 017e FFF7FEFF 		bl	__aeabi_fsub
 1239 0182 1690     		str	r0, [sp, #88]	@ float
 303:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[7] = matrixA[2] * matrixA[3] - matrixA[0] * matrixA[5];
 1240              		.loc 1 303 0
 1241 0184 0599     		ldr	r1, [sp, #20]	@ float
 1242 0186 4046     		mov	r0, r8
 1243 0188 FFF7FEFF 		bl	__aeabi_fmul
 1244 018c 3946     		mov	r1, r7
 1245 018e 8046     		mov	r8, r0
 1246 0190 2046     		mov	r0, r4
 1247 0192 FFF7FEFF 		bl	__aeabi_fmul
 1248 0196 0146     		mov	r1, r0
 1249 0198 4046     		mov	r0, r8
 1250 019a FFF7FEFF 		bl	__aeabi_fsub
 304:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[8] = matrixA[0] * matrixA[4] - matrixA[1] * matrixA[3];
 1251              		.loc 1 304 0
 1252 019e 3146     		mov	r1, r6
 303:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[7] = matrixA[2] * matrixA[3] - matrixA[0] * matrixA[5];
 1253              		.loc 1 303 0
 1254 01a0 1790     		str	r0, [sp, #92]	@ float
 1255              		.loc 1 304 0
 1256 01a2 2046     		mov	r0, r4
 1257 01a4 FFF7FEFF 		bl	__aeabi_fmul
 1258 01a8 0599     		ldr	r1, [sp, #20]	@ float
 1259 01aa 0446     		mov	r4, r0
 1260 01ac 2846     		mov	r0, r5
 1261 01ae FFF7FEFF 		bl	__aeabi_fmul
 1262 01b2 0146     		mov	r1, r0
 1263 01b4 2046     		mov	r0, r4
 1264 01b6 FFF7FEFF 		bl	__aeabi_fsub
 305:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 306:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixTranspose3x3(transposeMinors, minors);
 1265              		.loc 1 306 0
 1266 01ba 19AC     		add	r4, sp, #100
 304:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   minors[8] = matrixA[0] * matrixA[4] - matrixA[1] * matrixA[3];
 1267              		.loc 1 304 0
 1268 01bc 1890     		str	r0, [sp, #96]	@ float
 1269              		.loc 1 306 0
 1270 01be 10A9     		add	r1, sp, #64
 1271 01c0 2046     		mov	r0, r4
 1272 01c2 FFF7FEFF 		bl	_Z18matrixTranspose3x3PfS_
 1273              	.LVL88:
 307:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 308:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   det = 1/det;
 1274              		.loc 1 308 0
 1275 01c6 039A     		ldr	r2, [sp, #12]
 1276 01c8 4FF07E50 		mov	r0, #1065353216
 1277 01cc 1146     		mov	r1, r2
 1278 01ce FFF7FEFF 		bl	__aeabi_fdiv
 1279              	.LVL89:
 309:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 310:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   matrixScale(3,3, matrixC, det, transposeMinors);
 1280              		.loc 1 310 0
 1281 01d2 DDF808C0 		ldr	ip, [sp, #8]
 308:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   det = 1/det;
 1282              		.loc 1 308 0
 1283 01d6 0346     		mov	r3, r0
 1284              		.loc 1 310 0
 1285 01d8 0320     		movs	r0, #3
 1286 01da 0146     		mov	r1, r0
 1287 01dc 6246     		mov	r2, ip
 1288 01de 0094     		str	r4, [sp, #0]
 1289 01e0 FFF7FEFF 		bl	_Z11matrixScaleiiPffS_
 1290              	.LBE31:
 311:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 1291              		.loc 1 311 0
 1292 01e4 23B0     		add	sp, sp, #140
 1293 01e6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1294              		.cfi_endproc
 1295              	.LFE131:
 1297              		.global	__aeabi_fcmpge
 1298              		.section	.text._Z7arctan2ff,"ax",%progbits
 1299              		.align	1
 1300              		.global	_Z7arctan2ff
 1301              		.thumb
 1302              		.thumb_func
 1304              	_Z7arctan2ff:
 1305              	.LFB132:
 312:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 313:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 314:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** // Alternate method to calculate arctangent from: http://www.dspguru.com/comp.dsp/tricks/alg/fxdata
 315:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** float arctan2(float y, float x) 
 316:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 1306              		.loc 1 316 0
 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 0
 1309              		@ frame_needed = 0, uses_anonymous_args = 0
 1310              	.LVL90:
 1311 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1312              	.LCFI15:
 1313              		.cfi_def_cfa_offset 24
 1314              		.cfi_offset 14, -4
 1315              		.cfi_offset 7, -8
 1316              		.cfi_offset 6, -12
 1317              		.cfi_offset 5, -16
 1318              		.cfi_offset 4, -20
 1319              		.cfi_offset 3, -24
 1320              		.loc 1 316 0
 1321 0002 0C46     		mov	r4, r1
 1322 0004 0646     		mov	r6, r0
 1323              	.LBB32:
 317:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float coeff_1 = PI/4;
 318:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float coeff_2 = 3*coeff_1;
 319:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float abs_y = fabs(y)+1e-10;      // kludge to prevent 0/0 condition
 1324              		.loc 1 319 0
 1325 0006 1E49     		ldr	r1, .L67
 1326              	.LVL91:
 1327 0008 20F00040 		bic	r0, r0, #-2147483648
 1328              	.LVL92:
 1329 000c FFF7FEFF 		bl	__aeabi_fadd
 320:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float r, angle;
 321:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****    
 322:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   if (x >= 0) 
 1330              		.loc 1 322 0
 1331 0010 0021     		movs	r1, #0
 319:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float abs_y = fabs(y)+1e-10;      // kludge to prevent 0/0 condition
 1332              		.loc 1 319 0
 1333 0012 0546     		mov	r5, r0
 1334              	.LVL93:
 1335              		.loc 1 322 0
 1336 0014 2046     		mov	r0, r4
 1337              	.LVL94:
 1338 0016 FFF7FEFF 		bl	__aeabi_fcmpge
 1339 001a 90B1     		cbz	r0, .L65
 1340              	.LVL95:
 323:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 324:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     r = (x - abs_y) / (x + abs_y);
 1341              		.loc 1 324 0
 1342 001c 2946     		mov	r1, r5
 1343 001e 2046     		mov	r0, r4
 1344 0020 FFF7FEFF 		bl	__aeabi_fsub
 1345 0024 2946     		mov	r1, r5
 1346 0026 0746     		mov	r7, r0
 1347 0028 2046     		mov	r0, r4
 1348 002a FFF7FEFF 		bl	__aeabi_fadd
 1349 002e 0146     		mov	r1, r0
 1350 0030 3846     		mov	r0, r7
 1351 0032 FFF7FEFF 		bl	__aeabi_fdiv
 325:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     angle = coeff_1 - coeff_1 * r;
 1352              		.loc 1 325 0
 1353 0036 1349     		ldr	r1, .L67+4
 1354 0038 FFF7FEFF 		bl	__aeabi_fmul
 1355 003c 0146     		mov	r1, r0
 1356 003e 1148     		ldr	r0, .L67+4
 1357 0040 11E0     		b	.L66
 1358              	.LVL96:
 1359              	.L65:
 326:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 327:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   else 
 328:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 329:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     r = (x + abs_y) / (abs_y - x);
 1360              		.loc 1 329 0
 1361 0042 2946     		mov	r1, r5
 1362 0044 2046     		mov	r0, r4
 1363 0046 FFF7FEFF 		bl	__aeabi_fadd
 1364 004a 2146     		mov	r1, r4
 1365 004c 0746     		mov	r7, r0
 1366 004e 2846     		mov	r0, r5
 1367 0050 FFF7FEFF 		bl	__aeabi_fsub
 1368 0054 0146     		mov	r1, r0
 1369 0056 3846     		mov	r0, r7
 1370 0058 FFF7FEFF 		bl	__aeabi_fdiv
 330:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     angle = coeff_2 - coeff_1 * r;
 1371              		.loc 1 330 0
 1372 005c 0949     		ldr	r1, .L67+4
 1373 005e FFF7FEFF 		bl	__aeabi_fmul
 1374 0062 0146     		mov	r1, r0
 1375 0064 0848     		ldr	r0, .L67+8
 1376              	.LVL97:
 1377              	.L66:
 1378 0066 FFF7FEFF 		bl	__aeabi_fsub
 331:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 332:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   if (y < 0)
 1379              		.loc 1 332 0
 1380 006a 0021     		movs	r1, #0
 330:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     angle = coeff_2 - coeff_1 * r;
 1381              		.loc 1 330 0
 1382 006c 0446     		mov	r4, r0
 1383              	.LVL98:
 1384              		.loc 1 332 0
 1385 006e 3046     		mov	r0, r6
 1386              	.LVL99:
 1387 0070 FFF7FEFF 		bl	__aeabi_fcmplt
 1388 0074 08B1     		cbz	r0, .L61
 333:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 334:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     return(-angle);     // negate if in quad III or IV
 1389              		.loc 1 334 0
 1390 0076 04F10044 		add	r4, r4, #-2147483648
 1391              	.LVL100:
 1392              	.L61:
 1393              	.LBE32:
 335:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 336:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   else
 337:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {
 338:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     return(angle);
 339:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 340:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 1394              		.loc 1 340 0
 1395 007a 2046     		mov	r0, r4
 1396 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1397              	.L68:
 1398 007e 00BF     		.align	2
 1399              	.L67:
 1400 0080 FFE6DB2E 		.word	786163455
 1401 0084 DB0F493F 		.word	1061752795
 1402 0088 E4CB1640 		.word	1075235812
 1403              		.cfi_endproc
 1404              	.LFE132:
 1406              		.global	__aeabi_fcmpgt
 1407              		.section	.text._Z15findMedianFloatPfi,"ax",%progbits
 1408              		.align	1
 1409              		.global	_Z15findMedianFloatPfi
 1410              		.thumb
 1411              		.thumb_func
 1413              	_Z15findMedianFloatPfi:
 1414              	.LFB133:
 341:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 342:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** // Used for sensor calibration
 343:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** // Takes the median of 50 results as zero
 344:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** // Thanks ala42! Post: http://aeroquad.com/showthread.php?1369-The-big-enhancement-addition-to-2.0-
 345:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** float findMedianFloat(float *data, int arraySize) 
 346:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 1415              		.loc 1 346 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 0, uses_anonymous_args = 0
 1419              	.LVL101:
 1420 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1421              	.LCFI16:
 1422              		.cfi_def_cfa_offset 32
 1423              		.cfi_offset 14, -4
 1424              		.cfi_offset 10, -8
 1425              		.cfi_offset 9, -12
 1426              		.cfi_offset 8, -16
 1427              		.cfi_offset 7, -20
 1428              		.cfi_offset 6, -24
 1429              		.cfi_offset 5, -28
 1430              		.cfi_offset 4, -32
 1431              		.loc 1 346 0
 1432 0004 0446     		mov	r4, r0
 1433 0006 0E46     		mov	r6, r1
 1434 0008 16E0     		b	.L70
 1435              	.LVL102:
 1436              	.L73:
 1437              	.LBB33:
 347:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   float temp;
 348:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   boolean done = 0;
 349:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   byte i;
 350:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   
 351:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****    // Sorts numbers from lowest to highest
 352:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   while (done != 1) 
 353:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {        
 354:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     done = 1;
 355:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for (i=0; i<(arraySize-1); i++) 
 356:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 	{
 357:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       if (data[i] > data[i+1]) 
 1438              		.loc 1 357 0
 1439 000a 6F1C     		adds	r7, r5, #1
 1440 000c 54F825A0 		ldr	sl, [r4, r5, lsl #2]	@ float
 1441 0010 54F82790 		ldr	r9, [r4, r7, lsl #2]	@ float
 1442 0014 5046     		mov	r0, sl
 1443 0016 4946     		mov	r1, r9
 1444 0018 FFF7FEFF 		bl	__aeabi_fcmpgt
 1445 001c 28B1     		cbz	r0, .L71
 1446              	.LVL103:
 358:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 	  {     // numbers are out of order - swap
 359:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         temp = data[i+1];
 360:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         data[i+1] = data[i];
 1447              		.loc 1 360 0
 1448 001e 44F827A0 		str	sl, [r4, r7, lsl #2]	@ float
 361:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         data[i] = temp;
 362:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         done = 0;
 1449              		.loc 1 362 0
 1450 0022 4FF00008 		mov	r8, #0
 361:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         data[i] = temp;
 1451              		.loc 1 361 0
 1452 0026 44F82590 		str	r9, [r4, r5, lsl #2]	@ float
 1453              	.LVL104:
 1454              	.L71:
 355:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for (i=0; i<(arraySize-1); i++) 
 1455              		.loc 1 355 0
 1456 002a FDB2     		uxtb	r5, r7
 1457              	.LVL105:
 1458              	.L75:
 355:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for (i=0; i<(arraySize-1); i++) 
 1459              		.loc 1 355 0 is_stmt 0 discriminator 1
 1460 002c 731E     		subs	r3, r6, #1
 1461 002e 9D42     		cmp	r5, r3
 1462 0030 EBDB     		blt	.L73
 1463              	.LVL106:
 352:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   while (done != 1) 
 1464              		.loc 1 352 0 is_stmt 1
 1465 0032 B8F1000F 		cmp	r8, #0
 1466 0036 03D1     		bne	.L74
 1467              	.LVL107:
 1468              	.L70:
 1469              		.loc 1 362 0 discriminator 1
 1470 0038 0025     		movs	r5, #0
 1471 003a 4FF00108 		mov	r8, #1
 1472 003e F5E7     		b	.L75
 1473              	.LVL108:
 1474              	.L74:
 363:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       }
 364:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     }
 365:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 366:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   
 367:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   return data[arraySize/2]; // return the median value
 1475              		.loc 1 367 0
 1476 0040 06EBD676 		add	r6, r6, r6, lsr #31
 1477              	.LVL109:
 1478 0044 7610     		asrs	r6, r6, #1
 1479              	.LBE33:
 368:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 1480              		.loc 1 368 0
 1481 0046 54F82600 		ldr	r0, [r4, r6, lsl #2]	@ float
 1482 004a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 1483              		.cfi_endproc
 1484              	.LFE133:
 1486              		.section	.text._Z13findMedianIntPii,"ax",%progbits
 1487              		.align	1
 1488              		.global	_Z13findMedianIntPii
 1489              		.thumb
 1490              		.thumb_func
 1492              	_Z13findMedianIntPii:
 1493              	.LFB134:
 369:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 370:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 371:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** int findMedianInt(int *data, int arraySize) 
 372:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 1494              		.loc 1 372 0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 0
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 1498              	.LVL110:
 1499 0000 70B5     		push	{r4, r5, r6, lr}
 1500              	.LCFI17:
 1501              		.cfi_def_cfa_offset 16
 1502              		.cfi_offset 14, -4
 1503              		.cfi_offset 6, -8
 1504              		.cfi_offset 5, -12
 1505              		.cfi_offset 4, -16
 1506 0002 10E0     		b	.L78
 1507              	.LVL111:
 1508              	.L80:
 1509              	.LBB34:
 373:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   int temp;
 374:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   boolean done = 0;
 375:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   byte i;
 376:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   
 377:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****    // Sorts numbers from lowest to highest
 378:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   while (done != 1) 
 379:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {        
 380:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     done = 1;
 381:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for (i=0; i<(arraySize-1); i++) 
 382:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 	{
 383:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       if (data[i] > data[i+1]) 
 1510              		.loc 1 383 0
 1511 0004 5A1C     		adds	r2, r3, #1
 1512 0006 50F82360 		ldr	r6, [r0, r3, lsl #2]
 1513 000a 50F82250 		ldr	r5, [r0, r2, lsl #2]
 1514 000e AE42     		cmp	r6, r5
 1515 0010 04DD     		ble	.L79
 1516              	.LVL112:
 384:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 	  {     // numbers are out of order - swap
 385:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         temp = data[i+1];
 386:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         data[i+1] = data[i];
 1517              		.loc 1 386 0
 1518 0012 40F82260 		str	r6, [r0, r2, lsl #2]
 387:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         data[i] = temp;
 388:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         done = 0;
 1519              		.loc 1 388 0
 1520 0016 0024     		movs	r4, #0
 387:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         data[i] = temp;
 1521              		.loc 1 387 0
 1522 0018 40F82350 		str	r5, [r0, r3, lsl #2]
 1523              	.LVL113:
 1524              	.L79:
 381:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for (i=0; i<(arraySize-1); i++) 
 1525              		.loc 1 381 0
 1526 001c D3B2     		uxtb	r3, r2
 1527              	.LVL114:
 1528              	.L82:
 381:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for (i=0; i<(arraySize-1); i++) 
 1529              		.loc 1 381 0 is_stmt 0 discriminator 1
 1530 001e 4A1E     		subs	r2, r1, #1
 1531 0020 9342     		cmp	r3, r2
 1532 0022 EFDB     		blt	.L80
 1533              	.LVL115:
 378:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   while (done != 1) 
 1534              		.loc 1 378 0 is_stmt 1
 1535 0024 14B9     		cbnz	r4, .L81
 1536              	.LVL116:
 1537              	.L78:
 1538              		.loc 1 388 0 discriminator 1
 1539 0026 0023     		movs	r3, #0
 1540 0028 0124     		movs	r4, #1
 1541 002a F8E7     		b	.L82
 1542              	.LVL117:
 1543              	.L81:
 389:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       }
 390:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     }
 391:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 392:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   
 393:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   return data[arraySize/2]; // return the median value
 1544              		.loc 1 393 0
 1545 002c 01EBD173 		add	r3, r1, r1, lsr #31
 1546              	.LVL118:
 1547 0030 5910     		asrs	r1, r3, #1
 1548              	.LVL119:
 1549              	.LBE34:
 394:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 1550              		.loc 1 394 0
 1551 0032 50F82100 		ldr	r0, [r0, r1, lsl #2]
 1552              	.LVL120:
 1553 0036 70BD     		pop	{r4, r5, r6, pc}
 1554              		.cfi_endproc
 1555              	.LFE134:
 1557              		.section	.text._Z21findMedianIntWithDiffPiiS_,"ax",%progbits
 1558              		.align	1
 1559              		.global	_Z21findMedianIntWithDiffPiiS_
 1560              		.thumb
 1561              		.thumb_func
 1563              	_Z21findMedianIntWithDiffPiiS_:
 1564              	.LFB135:
 395:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 396:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** int findMedianIntWithDiff(int *data, int arraySize, int * diff) 
 397:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** {
 1565              		.loc 1 397 0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 0
 1568              		@ frame_needed = 0, uses_anonymous_args = 0
 1569              	.LVL121:
 1570 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1571              	.LCFI18:
 1572              		.cfi_def_cfa_offset 20
 1573              		.cfi_offset 14, -4
 1574              		.cfi_offset 7, -8
 1575              		.cfi_offset 6, -12
 1576              		.cfi_offset 5, -16
 1577              		.cfi_offset 4, -20
 1578 0002 10E0     		b	.L84
 1579              	.LVL122:
 1580              	.L86:
 1581              	.LBB35:
 398:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   int temp;
 399:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   boolean done = 0;
 400:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   byte i;
 401:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   
 402:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****    // Sorts numbers from lowest to highest
 403:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   while (done != 1) 
 404:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   {        
 405:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     done = 1;
 406:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for (i=0; i<(arraySize-1); i++) 
 407:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 	{
 408:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       if (data[i] > data[i+1]) 
 1582              		.loc 1 408 0
 1583 0004 5C1C     		adds	r4, r3, #1
 1584 0006 50F82370 		ldr	r7, [r0, r3, lsl #2]
 1585 000a 50F82460 		ldr	r6, [r0, r4, lsl #2]
 1586 000e B742     		cmp	r7, r6
 1587 0010 04DD     		ble	.L85
 1588              	.LVL123:
 409:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 	  {     // numbers are out of order - swap
 410:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         temp = data[i+1];
 411:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         data[i+1] = data[i];
 1589              		.loc 1 411 0
 1590 0012 40F82470 		str	r7, [r0, r4, lsl #2]
 412:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         data[i] = temp;
 413:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         done = 0;
 1591              		.loc 1 413 0
 1592 0016 0025     		movs	r5, #0
 412:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****         data[i] = temp;
 1593              		.loc 1 412 0
 1594 0018 40F82360 		str	r6, [r0, r3, lsl #2]
 1595              	.LVL124:
 1596              	.L85:
 406:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for (i=0; i<(arraySize-1); i++) 
 1597              		.loc 1 406 0
 1598 001c E3B2     		uxtb	r3, r4
 1599              	.LVL125:
 1600              	.L88:
 406:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     for (i=0; i<(arraySize-1); i++) 
 1601              		.loc 1 406 0 is_stmt 0 discriminator 1
 1602 001e 4C1E     		subs	r4, r1, #1
 1603 0020 A342     		cmp	r3, r4
 1604 0022 EFDB     		blt	.L86
 1605              	.LVL126:
 403:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   while (done != 1) 
 1606              		.loc 1 403 0 is_stmt 1
 1607 0024 15B9     		cbnz	r5, .L87
 1608              	.LVL127:
 1609              	.L84:
 1610              		.loc 1 413 0 discriminator 1
 1611 0026 0023     		movs	r3, #0
 1612 0028 0125     		movs	r5, #1
 1613 002a F8E7     		b	.L88
 1614              	.LVL128:
 1615              	.L87:
 414:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****       }
 415:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     }
 416:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 417:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 418:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   *diff = abs(data[0] - data[arraySize-1]);
 1616              		.loc 1 418 0
 1617 002c 0568     		ldr	r5, [r0, #0]
 1618              	.LVL129:
 1619 002e 50F82430 		ldr	r3, [r0, r4, lsl #2]
 1620              	.LVL130:
 1621 0032 EB1A     		subs	r3, r5, r3
 1622 0034 002B     		cmp	r3, #0
 1623 0036 B8BF     		it	lt
 1624 0038 5B42     		rsblt	r3, r3, #0
 1625 003a 1360     		str	r3, [r2, #0]
 419:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   
 420:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   return data[arraySize/2]; // return the median value
 1626              		.loc 1 420 0
 1627 003c 01EBD172 		add	r2, r1, r1, lsr #31
 1628              	.LVL131:
 1629 0040 5110     		asrs	r1, r2, #1
 1630              	.LVL132:
 1631              	.LBE35:
 421:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 1632              		.loc 1 421 0
 1633 0042 50F82100 		ldr	r0, [r0, r1, lsl #2]
 1634              	.LVL133:
 1635 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 1636              		.cfi_endproc
 1637              	.LFE135:
 1639              		.section	.text._Z10isSwitchedff,"ax",%progbits
 1640              		.align	1
 1641              		.global	_Z10isSwitchedff
 1642              		.thumb
 1643              		.thumb_func
 1645              	_Z10isSwitchedff:
 1646              	.LFB136:
 422:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 423:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 
 424:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** boolean isSwitched(float previousError, float currentError) {
 1647              		.loc 1 424 0
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 0
 1650              		@ frame_needed = 0, uses_anonymous_args = 0
 1651              	.LVL134:
 1652 0000 38B5     		push	{r3, r4, r5, lr}
 1653              	.LCFI19:
 1654              		.cfi_def_cfa_offset 16
 1655              		.cfi_offset 14, -4
 1656              		.cfi_offset 5, -8
 1657              		.cfi_offset 4, -12
 1658              		.cfi_offset 3, -16
 1659              		.loc 1 424 0
 1660 0002 0D46     		mov	r5, r1
 425:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   if ( (previousError > 0 &&  currentError < 0) ||
 1661              		.loc 1 425 0
 1662 0004 0021     		movs	r1, #0
 1663              	.LVL135:
 424:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** boolean isSwitched(float previousError, float currentError) {
 1664              		.loc 1 424 0
 1665 0006 0446     		mov	r4, r0
 1666              		.loc 1 425 0
 1667 0008 FFF7FEFF 		bl	__aeabi_fcmpgt
 1668              	.LVL136:
 1669 000c 20B1     		cbz	r0, .L90
 1670              		.loc 1 425 0 is_stmt 0 discriminator 1
 1671 000e 2846     		mov	r0, r5
 1672 0010 0021     		movs	r1, #0
 1673 0012 FFF7FEFF 		bl	__aeabi_fcmplt
 1674 0016 68B9     		cbnz	r0, .L95
 1675              	.L90:
 1676              		.loc 1 425 0 discriminator 2
 1677 0018 2046     		mov	r0, r4
 1678 001a 0021     		movs	r1, #0
 1679 001c FFF7FEFF 		bl	__aeabi_fcmplt
 1680 0020 50B1     		cbz	r0, .L99
 1681              		.loc 1 425 0 discriminator 3
 1682 0022 2846     		mov	r0, r5
 1683 0024 0021     		movs	r1, #0
 1684 0026 0124     		movs	r4, #1
 1685              	.LVL137:
 1686 0028 FFF7FEFF 		bl	__aeabi_fcmpgt
 1687 002c 00B9     		cbnz	r0, .L94
 1688 002e 0024     		movs	r4, #0
 1689              	.L94:
 426:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** 	   (previousError < 0 &&  currentError > 0)) {
 427:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****     return true;
 1690              		.loc 1 427 0 is_stmt 1 discriminator 3
 1691 0030 E0B2     		uxtb	r0, r4
 1692 0032 38BD     		pop	{r3, r4, r5, pc}
 1693              	.LVL138:
 1694              	.L95:
 1695              		.loc 1 427 0 is_stmt 0
 1696 0034 0120     		movs	r0, #1
 1697 0036 38BD     		pop	{r3, r4, r5, pc}
 1698              	.L99:
 428:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   }
 429:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp ****   return false;
 1699              		.loc 1 429 0 is_stmt 1
 1700 0038 0020     		movs	r0, #0
 430:C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math\AQMath.cpp **** }
 1701              		.loc 1 430 0
 1702 003a 38BD     		pop	{r3, r4, r5, pc}
 1703              		.cfi_endproc
 1704              	.LFE136:
 1706              		.global	_ZN12MedianFilterC1Ev
 1707              		.thumb_set _ZN12MedianFilterC1Ev,_ZN12MedianFilterC2Ev
 1708              		.text
 1709              	.Letext0:
 1710              		.file 2 "../Libmaple/libmaple/libmaple/libmaple_types.h"
 1711              		.file 3 "../Libmaple/libmaple/wirish/wirish.h"
 1712              		.file 4 "C:/MinGW/msys/1.0/home/Klaus/Libraries/AQ_Math/AQMath.h"
 1713              		.file 5 "../Libmaple/libmaple/libmaple/systick.h"
DEFINED SYMBOLS
                            *ABS*:00000000 AQMath.cpp
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:23     .text._Z12filterSmoothfff:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:28     .text._Z12filterSmoothfff:00000000 _Z12filterSmoothfff
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:80     .text._Z20filterSmoothWithTimeffff:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:85     .text._Z20filterSmoothWithTimeffff:00000000 _Z20filterSmoothWithTimeffff
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:144    .text._ZN12MedianFilterC2Ev:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:149    .text._ZN12MedianFilterC2Ev:00000000 _ZN12MedianFilterC2Ev
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:163    .text._ZN12MedianFilter10initializeEv:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:168    .text._ZN12MedianFilter10initializeEv:00000000 _ZN12MedianFilter10initializeEv
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:205    .text._ZN12MedianFilter6filterEf:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:210    .text._ZN12MedianFilter6filterEf:00000000 _ZN12MedianFilter6filterEf
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:319    .text._Z16vectorDotProductiPfS_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:324    .text._Z16vectorDotProductiPfS_:00000000 _Z16vectorDotProductiPfS_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:391    .text._Z18vectorCrossProductPfS_S_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:396    .text._Z18vectorCrossProductPfS_S_:00000000 _Z18vectorCrossProductPfS_S_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:463    .text._Z11vectorScaleiPfS_f:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:468    .text._Z11vectorScaleiPfS_f:00000000 _Z11vectorScaleiPfS_f
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:524    .text._Z9vectorAddiPfS_S_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:529    .text._Z9vectorAddiPfS_S_:00000000 _Z9vectorAddiPfS_S_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:585    .text._Z14vectorSubtractiPfS_S_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:590    .text._Z14vectorSubtractiPfS_S_:00000000 _Z14vectorSubtractiPfS_S_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:646    .text._Z14matrixMultiplyiiiPfS_S_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:651    .text._Z14matrixMultiplyiiiPfS_S_:00000000 _Z14matrixMultiplyiiiPfS_S_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:798    .text._Z9matrixAddiiPfS_S_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:803    .text._Z9matrixAddiiPfS_S_:00000000 _Z9matrixAddiiPfS_S_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:859    .text._Z14matrixSubtractiiPfS_S_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:864    .text._Z14matrixSubtractiiPfS_S_:00000000 _Z14matrixSubtractiiPfS_S_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:920    .text._Z11matrixScaleiiPffS_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:925    .text._Z11matrixScaleiiPffS_:00000000 _Z11matrixScaleiiPffS_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:981    .text._Z18matrixTranspose3x3PfS_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:986    .text._Z18matrixTranspose3x3PfS_:00000000 _Z18matrixTranspose3x3PfS_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1028   .text._Z16matrixInverse3x3PfS_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1033   .text._Z16matrixInverse3x3PfS_:00000000 _Z16matrixInverse3x3PfS_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1299   .text._Z7arctan2ff:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1304   .text._Z7arctan2ff:00000000 _Z7arctan2ff
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1400   .text._Z7arctan2ff:00000080 $d
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1408   .text._Z15findMedianFloatPfi:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1413   .text._Z15findMedianFloatPfi:00000000 _Z15findMedianFloatPfi
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1487   .text._Z13findMedianIntPii:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1492   .text._Z13findMedianIntPii:00000000 _Z13findMedianIntPii
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1558   .text._Z21findMedianIntWithDiffPiiS_:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1563   .text._Z21findMedianIntWithDiffPiiS_:00000000 _Z21findMedianIntWithDiffPiiS_
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1640   .text._Z10isSwitchedff:00000000 $t
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:1645   .text._Z10isSwitchedff:00000000 _Z10isSwitchedff
C:\Users\Klaus\AppData\Local\Temp\ccAHH1bA.s:149    .text._ZN12MedianFilterC2Ev:00000000 _ZN12MedianFilterC1Ev
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fcmpeq
__aeabi_fmul
__aeabi_fsub
__aeabi_fadd
__aeabi_f2iz
__aeabi_i2f
__aeabi_fcmplt
memcpy
__aeabi_fdiv
__aeabi_fcmpge
__aeabi_fcmpgt
